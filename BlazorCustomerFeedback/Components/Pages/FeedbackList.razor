@using BlazorCustomerFeedback.Models
@using BlazorCustomerFeedback.Services
@inject IFeedbackService FeedbackService

<div class="container">
    <h2>Customer Feedback</h2>

    <div class="row mb-3">
        <div class="col">
            <div class="btn-group" role="group">
                @foreach (var status in Enum.GetValues(typeof(FeedbackStatus)))
                {
                    <button class="btn @(CurrentStatus == (FeedbackStatus)status ? "btn-primary" : "btn-outline-primary")"
                            @onclick="() => FilterByStatus((FeedbackStatus)status)">
                        @status
                    </button>
                }
            </div>
        </div>
    </div>

    @if (feedbackList == null)
    {
        <p>Loading...</p>
    }
    else
    {
        <div class="row">
            @foreach (var feedback in feedbackList)
            {
                <div class="col-md-4 mb-3">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">@feedback.Title</h5>
                            <p class="card-text">@feedback.Description</p>
                            <div class="d-flex justify-content-between align-items-center">
                                <span class="badge bg-primary">@feedback.Status</span>
                                <small class="text-muted">@feedback.CreatedAt.ToShortDateString()</small>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    private IEnumerable<Feedback> feedbackList;
    private FeedbackStatus CurrentStatus = FeedbackStatus.New;

    protected override async Task OnInitializedAsync()
    {
        await LoadFeedback();
    }

    private async Task LoadFeedback()
    {
        feedbackList = await FeedbackService.GetFeedbackByStatusAsync(CurrentStatus);
    }

    private async Task FilterByStatus(FeedbackStatus status)
    {
        CurrentStatus = status;
        await LoadFeedback();
    }
}